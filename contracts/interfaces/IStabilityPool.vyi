# SPDX-License-Identifier: MIT
# pragma version ~=0.4.0

from . import ITroveManager
from . import ILUSDToken
from . import IBorrowerOperations
from . import ICommunityIssuance
from . import IActivePool
from . import IDefaultPool
from . import IPriceFeed
from . import ISortedTroves
from . import ILQTYStaking
from . import ICollSurplusPool

# Structs

struct FrontEnd:
    kickbackRate: uint256
    registered: bool

struct Deposit:
    initialValue: uint256
    frontendTag: address

struct Snapshots:
    S: uint256
    P: uint256
    G: uint256
    scale: uint128
    epoch: uint128

# Events

event StabilityPoolETHBalanceUpdated:
    new_balance: uint256

event StabilityPoolRDBalanceUpdated:
    new_balance: uint256

event P_Updated:
    P: uint256

event S_Updated:
    S: uint256
    epoch: uint128
    scale: uint128

event G_Updated:
    G: uint256
    epoch: uint128
    scale: uint128

event EpochUpdated:
    current_epoch: uint128

event ScaleUpdated:
    current_scale: uint128

event FrontendRegistered:
    frontend: address
    kickback_rate: uint256

event FrontendTagSet:
    depositor: address
    frontend: address

event DepositSnapshotUpdated:
    depositor: address
    P: uint256
    S: uint256
    G: uint256

event FrontendSnapshotUpdated:
    frontend: address
    P: uint256
    G: uint256

event UserDepositChanged:
    depositor: address
    new_deposit: uint256

event FrontendStakeChanged:
    frontend: address
    new_frontend_stake: uint256
    depositor: address

event ETHGainWithdrawn:
    depositor: address
    eth: uint256
    rd_loss: uint256

event LQTYPaidToDepositor:
    depositor: address
    gov: uint256

event LQTYPaidToFrontEnd:
    frontend: address
    gov: uint256

event EtherSent:
    to: address
    amount: uint256

event OwnershipTransferred:
    previous_owner: address
    new_owner: address

# Functions

@external
def set_addresses(borrower_operations_address: address, trove_manager_address: address, active_pool_address: address, lusd_token_address: address, sorted_troves_address: address, price_feed_address: address, community_issuance_address: address):
    ...

@view
@external
def get_eth() -> uint256:
    ...

@view
@external
def get_total_lusd_deposits() -> uint256:
    ...

@external
def withdraw_from_sp(amount: uint256):
    ...

@external
def offset(debt_to_offset: uint256, coll_to_add: uint256):
    ...

@external
def register_frontend(kickback_rate: uint256):
    ...

@view
@external
def borrower_operations() -> IBorrowerOperations:
    ...

@view
@external
def lusd_token() -> ILUSDToken:
    ...

@view
@external
def community_issuance() -> ICommunityIssuance:
    ...

@view
@external
def active_pool() -> IActivePool:
    ...

@view
@external
def trove_manager() -> ITroveManager:
    ...


@view
@external
def price_feed() -> IPriceFeed:
    ...

@view
@external
def sorted_troves() -> ISortedTroves:
    ...

@view
@external
def deposits(arg0: address) -> Deposit:
    ...

@view
@external
def deposit_snapshots(arg0: address) -> Snapshots:
    ...

@view
@external
def frontends(arg0: address) -> FrontEnd:
    ...

@view
@external
def frontend_stakes(arg0: address) -> uint256:
    ...

@view
@external
def frontend_snapshots(arg0: address) -> Snapshots:
    ...

@view
@external
def P() -> uint256:
    ...

@view
@external
def SCALE_FACTOR() -> uint256:
    ...

@view
@external
def MCR() -> uint256:
    ...

@view
@external
def current_scale() -> uint128:
    ...

@view
@external
def current_epoch() -> uint128:
    ...

@view
@external
def epoch_to_scale_to_sum(arg0: uint128, arg1: uint128) -> uint256:
    ...

@view
@external
def epoch_to_scale_to_g(arg0: uint128, arg1: uint128) -> uint256:
    ...

@view
@external
def last_gov_error() -> uint256:
    ...

@view
@external
def last_eth_error_offset() -> uint256:
    ...

@view
@external
def last_lusd_loss_error_offset() -> uint256:
    ...

