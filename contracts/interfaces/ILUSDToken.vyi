# SPDX-License-Identifier: MIT
# pragma version ~=0.4.0

## ERC20

# Events
event Transfer:
    sender: indexed(address)
    receiver: indexed(address)
    value: uint256

event Approval:
    owner: indexed(address)
    spender: indexed(address)
    value: uint256

# Functions
@view
@external
def totalSupply() -> uint256:
    ...

@view
@external
def balanceOf(_owner: address) -> uint256:
    ...

@view
@external
def allowance(_owner: address, _spender: address) -> uint256:
    ...

@external
def transfer(_to: address, _value: uint256) -> bool:
    ...

@external
def transferFrom(_from: address, _to: address, _value: uint256) -> bool:
    ...

@external
def approve(_spender: address, _value: uint256) -> bool:
    ...
# end ERC20

# RDToken    
# --- Events ---

event TroveManagerAddressChanged:
    trove_manager_address: address

event StabilityPoolAddressChanged:
    new_stability_pool_address: address

event BorrowerOperationsAddressChanged:
    new_borrower_operations_address: address

event LUSDTokenBalanceUpdated:
    user: address
    amount: uint256

# --- Functions ---

@external
def mint(account: address, amount: uint256):
    ...

@external
def burn(account: address, amount: uint256):
    ...

@external
def send_to_pool(sender: address, pool_address: address, amount: uint256):
    ...

@external
def return_from_pool(pool_address: address, user: address, amount: uint256):
    ...
# End RDToken    

# ERC2612


@external
def permit(owner: address, spender: address, amount: uint256, deadline: uint256,
           v: uint8, r: bytes32, s: bytes32):
    ...

@external
@view
def nonces(owner: address) -> uint256:
    ...


@external
@view
def version() -> String[32]: # TODO verify this length
    ...


@external
@view
def permitTypeHash() -> bytes32:
    ...

@external
@view
def domainSeparator() -> bytes32:
    ...
