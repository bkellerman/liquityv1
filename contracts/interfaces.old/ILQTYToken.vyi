# SPDX-License-Identifier: MIT
# pragma version ~=0.4.0

from . import ILockupContractFactory

# Events

event CommunityIssuanceAddressSet:
    community_issuance_address: address


event LQTYStakingAddressSet:
    gov_staking_address: address


event LockupContractFactoryAddressSet:
    lockup_contract_factory_address: address


event OwnershipTransferred:
    previous_owner: address
    new_owner: address


# Functions

@view
@external
def totalSupply() -> uint256:
    ...


@view
@external
def balanceOf(account: address) -> uint256:
    ...


@view
@external
def get_deployment_start_time() -> uint256:
    ...


@view
@external
def get_lp_rewards_entitlement() -> uint256:
    ...


@external
def transfer(recipient: address, amount: uint256) -> bool:
    ...


@external
def approve(spender: address, amount: uint256) -> bool:
    ...


@external
def transfer_from(sender: address, recipient: address, amount: uint256) -> bool:
    ...


@external
def increase_allowance(spender: address, added_value: uint256) -> bool:
    ...


@external
def decrease_allowance(spender: address, subtracted_value: uint256) -> bool:
    ...


@external
def send_to_gov_staking(sender: address, amount: uint256):
    ...


@view
@external
def domain_separator() -> bytes32:
    ...


@external
def permit(owner: address, spender: address, amount: uint256, deadline: uint256, v: uint8, r: bytes32, s: bytes32):
    ...


@view
@external
def get_nonce(owner: address) -> uint256:
    ...


@view
@external
def name() -> String[32]:
    ...


@view
@external
def symbol() -> String[32]:
    ...


@view
@external
def decimals() -> uint8:
    ...


@view
@external
def version() -> String[32]:
    ...


@view
@external
def permit_type_hash() -> bytes32:
    ...


@view
@external
def total_supply() -> uint256:
    ...


@view
@external
def nonces(arg0: address) -> uint256:
    ...


@view
@external
def multisig_address() -> address:
    ...


@view
@external
def community_issuance_address() -> address:
    ...


@view
@external
def gov_staking_address() -> address:
    ...


@view
@external
def lockup_contract_factory() -> ILockupContractFactory:
    ...


